// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: payment.proto

package payment_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	Create(ctx context.Context, in *CreatePayment, opts ...grpc.CallOption) (*GetPayment, error)
	GetByID(ctx context.Context, in *PaymentPrimaryKey, opts ...grpc.CallOption) (*GetPayment, error)
	GetList(ctx context.Context, in *GetListPaymentRequest, opts ...grpc.CallOption) (*GetListPaymentResponse, error)
	Update(ctx context.Context, in *UpdatePayment, opts ...grpc.CallOption) (*GetPayment, error)
	Delete(ctx context.Context, in *PaymentPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
	Check(ctx context.Context, in *PaymentPrimaryKey, opts ...grpc.CallOption) (*CheckPaymentResp, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) Create(ctx context.Context, in *CreatePayment, opts ...grpc.CallOption) (*GetPayment, error) {
	out := new(GetPayment)
	err := c.cc.Invoke(ctx, "/payment_service_go.PaymentService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetByID(ctx context.Context, in *PaymentPrimaryKey, opts ...grpc.CallOption) (*GetPayment, error) {
	out := new(GetPayment)
	err := c.cc.Invoke(ctx, "/payment_service_go.PaymentService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetList(ctx context.Context, in *GetListPaymentRequest, opts ...grpc.CallOption) (*GetListPaymentResponse, error) {
	out := new(GetListPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment_service_go.PaymentService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Update(ctx context.Context, in *UpdatePayment, opts ...grpc.CallOption) (*GetPayment, error) {
	out := new(GetPayment)
	err := c.cc.Invoke(ctx, "/payment_service_go.PaymentService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Delete(ctx context.Context, in *PaymentPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/payment_service_go.PaymentService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Check(ctx context.Context, in *PaymentPrimaryKey, opts ...grpc.CallOption) (*CheckPaymentResp, error) {
	out := new(CheckPaymentResp)
	err := c.cc.Invoke(ctx, "/payment_service_go.PaymentService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations should embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	Create(context.Context, *CreatePayment) (*GetPayment, error)
	GetByID(context.Context, *PaymentPrimaryKey) (*GetPayment, error)
	GetList(context.Context, *GetListPaymentRequest) (*GetListPaymentResponse, error)
	Update(context.Context, *UpdatePayment) (*GetPayment, error)
	Delete(context.Context, *PaymentPrimaryKey) (*empty.Empty, error)
	Check(context.Context, *PaymentPrimaryKey) (*CheckPaymentResp, error)
}

// UnimplementedPaymentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) Create(context.Context, *CreatePayment) (*GetPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPaymentServiceServer) GetByID(context.Context, *PaymentPrimaryKey) (*GetPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedPaymentServiceServer) GetList(context.Context, *GetListPaymentRequest) (*GetListPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPaymentServiceServer) Update(context.Context, *UpdatePayment) (*GetPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPaymentServiceServer) Delete(context.Context, *PaymentPrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPaymentServiceServer) Check(context.Context, *PaymentPrimaryKey) (*CheckPaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_service_go.PaymentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Create(ctx, req.(*CreatePayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_service_go.PaymentService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetByID(ctx, req.(*PaymentPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_service_go.PaymentService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetList(ctx, req.(*GetListPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_service_go.PaymentService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Update(ctx, req.(*UpdatePayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_service_go.PaymentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Delete(ctx, req.(*PaymentPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_service_go.PaymentService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Check(ctx, req.(*PaymentPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment_service_go.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PaymentService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _PaymentService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _PaymentService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PaymentService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PaymentService_Delete_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _PaymentService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
