// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: free_user.proto

package free_user_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FreeUserServiceClient is the client API for FreeUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FreeUserServiceClient interface {
	Create(ctx context.Context, in *CreateFreeUser, opts ...grpc.CallOption) (*GetFreeUser, error)
	GetByID(ctx context.Context, in *FreeUserPrimaryKey, opts ...grpc.CallOption) (*GetFreeUser, error)
	GetList(ctx context.Context, in *GetListFreeUserRequest, opts ...grpc.CallOption) (*GetListFreeUserResponse, error)
	Update(ctx context.Context, in *UpdateFreeUser, opts ...grpc.CallOption) (*GetFreeUser, error)
	Delete(ctx context.Context, in *FreeUserPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
	Login(ctx context.Context, in *FreeUserLoginRequest, opts ...grpc.CallOption) (*FreeUserLoginResponse, error)
	Register(ctx context.Context, in *FreeUserRegisterRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RegisterConfirm(ctx context.Context, in *FreeUserRegisterConfRequest, opts ...grpc.CallOption) (*FreeUserLoginResponse, error)
	ChangePassword(ctx context.Context, in *FreeUserChangePassword, opts ...grpc.CallOption) (*FreeUserChangePasswordResp, error)
}

type freeUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFreeUserServiceClient(cc grpc.ClientConnInterface) FreeUserServiceClient {
	return &freeUserServiceClient{cc}
}

func (c *freeUserServiceClient) Create(ctx context.Context, in *CreateFreeUser, opts ...grpc.CallOption) (*GetFreeUser, error) {
	out := new(GetFreeUser)
	err := c.cc.Invoke(ctx, "/free_user_service_go.FreeUserService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeUserServiceClient) GetByID(ctx context.Context, in *FreeUserPrimaryKey, opts ...grpc.CallOption) (*GetFreeUser, error) {
	out := new(GetFreeUser)
	err := c.cc.Invoke(ctx, "/free_user_service_go.FreeUserService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeUserServiceClient) GetList(ctx context.Context, in *GetListFreeUserRequest, opts ...grpc.CallOption) (*GetListFreeUserResponse, error) {
	out := new(GetListFreeUserResponse)
	err := c.cc.Invoke(ctx, "/free_user_service_go.FreeUserService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeUserServiceClient) Update(ctx context.Context, in *UpdateFreeUser, opts ...grpc.CallOption) (*GetFreeUser, error) {
	out := new(GetFreeUser)
	err := c.cc.Invoke(ctx, "/free_user_service_go.FreeUserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeUserServiceClient) Delete(ctx context.Context, in *FreeUserPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/free_user_service_go.FreeUserService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeUserServiceClient) Login(ctx context.Context, in *FreeUserLoginRequest, opts ...grpc.CallOption) (*FreeUserLoginResponse, error) {
	out := new(FreeUserLoginResponse)
	err := c.cc.Invoke(ctx, "/free_user_service_go.FreeUserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeUserServiceClient) Register(ctx context.Context, in *FreeUserRegisterRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/free_user_service_go.FreeUserService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeUserServiceClient) RegisterConfirm(ctx context.Context, in *FreeUserRegisterConfRequest, opts ...grpc.CallOption) (*FreeUserLoginResponse, error) {
	out := new(FreeUserLoginResponse)
	err := c.cc.Invoke(ctx, "/free_user_service_go.FreeUserService/RegisterConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeUserServiceClient) ChangePassword(ctx context.Context, in *FreeUserChangePassword, opts ...grpc.CallOption) (*FreeUserChangePasswordResp, error) {
	out := new(FreeUserChangePasswordResp)
	err := c.cc.Invoke(ctx, "/free_user_service_go.FreeUserService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreeUserServiceServer is the server API for FreeUserService service.
// All implementations should embed UnimplementedFreeUserServiceServer
// for forward compatibility
type FreeUserServiceServer interface {
	Create(context.Context, *CreateFreeUser) (*GetFreeUser, error)
	GetByID(context.Context, *FreeUserPrimaryKey) (*GetFreeUser, error)
	GetList(context.Context, *GetListFreeUserRequest) (*GetListFreeUserResponse, error)
	Update(context.Context, *UpdateFreeUser) (*GetFreeUser, error)
	Delete(context.Context, *FreeUserPrimaryKey) (*empty.Empty, error)
	Login(context.Context, *FreeUserLoginRequest) (*FreeUserLoginResponse, error)
	Register(context.Context, *FreeUserRegisterRequest) (*empty.Empty, error)
	RegisterConfirm(context.Context, *FreeUserRegisterConfRequest) (*FreeUserLoginResponse, error)
	ChangePassword(context.Context, *FreeUserChangePassword) (*FreeUserChangePasswordResp, error)
}

// UnimplementedFreeUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFreeUserServiceServer struct {
}

func (UnimplementedFreeUserServiceServer) Create(context.Context, *CreateFreeUser) (*GetFreeUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFreeUserServiceServer) GetByID(context.Context, *FreeUserPrimaryKey) (*GetFreeUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedFreeUserServiceServer) GetList(context.Context, *GetListFreeUserRequest) (*GetListFreeUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedFreeUserServiceServer) Update(context.Context, *UpdateFreeUser) (*GetFreeUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFreeUserServiceServer) Delete(context.Context, *FreeUserPrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFreeUserServiceServer) Login(context.Context, *FreeUserLoginRequest) (*FreeUserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedFreeUserServiceServer) Register(context.Context, *FreeUserRegisterRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedFreeUserServiceServer) RegisterConfirm(context.Context, *FreeUserRegisterConfRequest) (*FreeUserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterConfirm not implemented")
}
func (UnimplementedFreeUserServiceServer) ChangePassword(context.Context, *FreeUserChangePassword) (*FreeUserChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}

// UnsafeFreeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreeUserServiceServer will
// result in compilation errors.
type UnsafeFreeUserServiceServer interface {
	mustEmbedUnimplementedFreeUserServiceServer()
}

func RegisterFreeUserServiceServer(s grpc.ServiceRegistrar, srv FreeUserServiceServer) {
	s.RegisterService(&FreeUserService_ServiceDesc, srv)
}

func _FreeUserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFreeUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeUserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/free_user_service_go.FreeUserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeUserServiceServer).Create(ctx, req.(*CreateFreeUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeUserService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeUserPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeUserServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/free_user_service_go.FreeUserService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeUserServiceServer).GetByID(ctx, req.(*FreeUserPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeUserService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFreeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeUserServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/free_user_service_go.FreeUserService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeUserServiceServer).GetList(ctx, req.(*GetListFreeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeUserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFreeUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeUserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/free_user_service_go.FreeUserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeUserServiceServer).Update(ctx, req.(*UpdateFreeUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeUserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeUserPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeUserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/free_user_service_go.FreeUserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeUserServiceServer).Delete(ctx, req.(*FreeUserPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeUserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeUserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/free_user_service_go.FreeUserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeUserServiceServer).Login(ctx, req.(*FreeUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeUserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeUserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeUserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/free_user_service_go.FreeUserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeUserServiceServer).Register(ctx, req.(*FreeUserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeUserService_RegisterConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeUserRegisterConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeUserServiceServer).RegisterConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/free_user_service_go.FreeUserService/RegisterConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeUserServiceServer).RegisterConfirm(ctx, req.(*FreeUserRegisterConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeUserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeUserChangePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeUserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/free_user_service_go.FreeUserService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeUserServiceServer).ChangePassword(ctx, req.(*FreeUserChangePassword))
	}
	return interceptor(ctx, in, info, handler)
}

// FreeUserService_ServiceDesc is the grpc.ServiceDesc for FreeUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FreeUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "free_user_service_go.FreeUserService",
	HandlerType: (*FreeUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FreeUserService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _FreeUserService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _FreeUserService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FreeUserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FreeUserService_Delete_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _FreeUserService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _FreeUserService_Register_Handler,
		},
		{
			MethodName: "RegisterConfirm",
			Handler:    _FreeUserService_RegisterConfirm_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _FreeUserService_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "free_user.proto",
}
