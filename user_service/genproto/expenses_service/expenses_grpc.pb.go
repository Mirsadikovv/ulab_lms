// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: expenses.proto

package expenses_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExpensesServiceClient is the client API for ExpensesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpensesServiceClient interface {
	Create(ctx context.Context, in *CreateExpenses, opts ...grpc.CallOption) (*GetExpenses, error)
	GetByID(ctx context.Context, in *ExpensesPrimaryKey, opts ...grpc.CallOption) (*GetExpenses, error)
	GetList(ctx context.Context, in *GetListExpensesRequest, opts ...grpc.CallOption) (*GetListExpensesResponse, error)
	Update(ctx context.Context, in *UpdateExpenses, opts ...grpc.CallOption) (*GetExpenses, error)
	Delete(ctx context.Context, in *ExpensesPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
	Check(ctx context.Context, in *ExpensesPrimaryKey, opts ...grpc.CallOption) (*CheckExpensesResp, error)
}

type expensesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpensesServiceClient(cc grpc.ClientConnInterface) ExpensesServiceClient {
	return &expensesServiceClient{cc}
}

func (c *expensesServiceClient) Create(ctx context.Context, in *CreateExpenses, opts ...grpc.CallOption) (*GetExpenses, error) {
	out := new(GetExpenses)
	err := c.cc.Invoke(ctx, "/expenses_service_go.ExpensesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) GetByID(ctx context.Context, in *ExpensesPrimaryKey, opts ...grpc.CallOption) (*GetExpenses, error) {
	out := new(GetExpenses)
	err := c.cc.Invoke(ctx, "/expenses_service_go.ExpensesService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) GetList(ctx context.Context, in *GetListExpensesRequest, opts ...grpc.CallOption) (*GetListExpensesResponse, error) {
	out := new(GetListExpensesResponse)
	err := c.cc.Invoke(ctx, "/expenses_service_go.ExpensesService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Update(ctx context.Context, in *UpdateExpenses, opts ...grpc.CallOption) (*GetExpenses, error) {
	out := new(GetExpenses)
	err := c.cc.Invoke(ctx, "/expenses_service_go.ExpensesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Delete(ctx context.Context, in *ExpensesPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/expenses_service_go.ExpensesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Check(ctx context.Context, in *ExpensesPrimaryKey, opts ...grpc.CallOption) (*CheckExpensesResp, error) {
	out := new(CheckExpensesResp)
	err := c.cc.Invoke(ctx, "/expenses_service_go.ExpensesService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpensesServiceServer is the server API for ExpensesService service.
// All implementations should embed UnimplementedExpensesServiceServer
// for forward compatibility
type ExpensesServiceServer interface {
	Create(context.Context, *CreateExpenses) (*GetExpenses, error)
	GetByID(context.Context, *ExpensesPrimaryKey) (*GetExpenses, error)
	GetList(context.Context, *GetListExpensesRequest) (*GetListExpensesResponse, error)
	Update(context.Context, *UpdateExpenses) (*GetExpenses, error)
	Delete(context.Context, *ExpensesPrimaryKey) (*empty.Empty, error)
	Check(context.Context, *ExpensesPrimaryKey) (*CheckExpensesResp, error)
}

// UnimplementedExpensesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedExpensesServiceServer struct {
}

func (UnimplementedExpensesServiceServer) Create(context.Context, *CreateExpenses) (*GetExpenses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedExpensesServiceServer) GetByID(context.Context, *ExpensesPrimaryKey) (*GetExpenses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedExpensesServiceServer) GetList(context.Context, *GetListExpensesRequest) (*GetListExpensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedExpensesServiceServer) Update(context.Context, *UpdateExpenses) (*GetExpenses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedExpensesServiceServer) Delete(context.Context, *ExpensesPrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedExpensesServiceServer) Check(context.Context, *ExpensesPrimaryKey) (*CheckExpensesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}

// UnsafeExpensesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpensesServiceServer will
// result in compilation errors.
type UnsafeExpensesServiceServer interface {
	mustEmbedUnimplementedExpensesServiceServer()
}

func RegisterExpensesServiceServer(s grpc.ServiceRegistrar, srv ExpensesServiceServer) {
	s.RegisterService(&ExpensesService_ServiceDesc, srv)
}

func _ExpensesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExpenses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpensesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expenses_service_go.ExpensesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpensesServiceServer).Create(ctx, req.(*CreateExpenses))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpensesService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpensesPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpensesServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expenses_service_go.ExpensesService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpensesServiceServer).GetByID(ctx, req.(*ExpensesPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpensesService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListExpensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpensesServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expenses_service_go.ExpensesService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpensesServiceServer).GetList(ctx, req.(*GetListExpensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpensesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpenses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpensesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expenses_service_go.ExpensesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpensesServiceServer).Update(ctx, req.(*UpdateExpenses))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpensesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpensesPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpensesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expenses_service_go.ExpensesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpensesServiceServer).Delete(ctx, req.(*ExpensesPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpensesService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpensesPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpensesServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expenses_service_go.ExpensesService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpensesServiceServer).Check(ctx, req.(*ExpensesPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpensesService_ServiceDesc is the grpc.ServiceDesc for ExpensesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpensesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "expenses_service_go.ExpensesService",
	HandlerType: (*ExpensesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ExpensesService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ExpensesService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ExpensesService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ExpensesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ExpensesService_Delete_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _ExpensesService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "expenses.proto",
}
