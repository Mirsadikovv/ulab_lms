// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin.proto

package admin_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	Create(ctx context.Context, in *CreateAdmin, opts ...grpc.CallOption) (*GetAdmin, error)
	GetByID(ctx context.Context, in *AdminPrimaryKey, opts ...grpc.CallOption) (*GetAdmin, error)
	GetList(ctx context.Context, in *GetListAdminRequest, opts ...grpc.CallOption) (*GetListAdminResponse, error)
	Update(ctx context.Context, in *UpdateAdmin, opts ...grpc.CallOption) (*GetAdmin, error)
	Delete(ctx context.Context, in *AdminPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
	Login(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error)
	Register(ctx context.Context, in *AdminRegisterRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RegisterConfirm(ctx context.Context, in *AdminRegisterConfRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error)
	ChangePassword(ctx context.Context, in *AdminChangePassword, opts ...grpc.CallOption) (*AdminChangePasswordResp, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Create(ctx context.Context, in *CreateAdmin, opts ...grpc.CallOption) (*GetAdmin, error) {
	out := new(GetAdmin)
	err := c.cc.Invoke(ctx, "/admin_service_go.AdminService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetByID(ctx context.Context, in *AdminPrimaryKey, opts ...grpc.CallOption) (*GetAdmin, error) {
	out := new(GetAdmin)
	err := c.cc.Invoke(ctx, "/admin_service_go.AdminService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetList(ctx context.Context, in *GetListAdminRequest, opts ...grpc.CallOption) (*GetListAdminResponse, error) {
	out := new(GetListAdminResponse)
	err := c.cc.Invoke(ctx, "/admin_service_go.AdminService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Update(ctx context.Context, in *UpdateAdmin, opts ...grpc.CallOption) (*GetAdmin, error) {
	out := new(GetAdmin)
	err := c.cc.Invoke(ctx, "/admin_service_go.AdminService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Delete(ctx context.Context, in *AdminPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin_service_go.AdminService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Login(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error) {
	out := new(AdminLoginResponse)
	err := c.cc.Invoke(ctx, "/admin_service_go.AdminService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Register(ctx context.Context, in *AdminRegisterRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin_service_go.AdminService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RegisterConfirm(ctx context.Context, in *AdminRegisterConfRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error) {
	out := new(AdminLoginResponse)
	err := c.cc.Invoke(ctx, "/admin_service_go.AdminService/RegisterConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ChangePassword(ctx context.Context, in *AdminChangePassword, opts ...grpc.CallOption) (*AdminChangePasswordResp, error) {
	out := new(AdminChangePasswordResp)
	err := c.cc.Invoke(ctx, "/admin_service_go.AdminService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations should embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	Create(context.Context, *CreateAdmin) (*GetAdmin, error)
	GetByID(context.Context, *AdminPrimaryKey) (*GetAdmin, error)
	GetList(context.Context, *GetListAdminRequest) (*GetListAdminResponse, error)
	Update(context.Context, *UpdateAdmin) (*GetAdmin, error)
	Delete(context.Context, *AdminPrimaryKey) (*empty.Empty, error)
	Login(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error)
	Register(context.Context, *AdminRegisterRequest) (*empty.Empty, error)
	RegisterConfirm(context.Context, *AdminRegisterConfRequest) (*AdminLoginResponse, error)
	ChangePassword(context.Context, *AdminChangePassword) (*AdminChangePasswordResp, error)
}

// UnimplementedAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) Create(context.Context, *CreateAdmin) (*GetAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdminServiceServer) GetByID(context.Context, *AdminPrimaryKey) (*GetAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedAdminServiceServer) GetList(context.Context, *GetListAdminRequest) (*GetListAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAdminServiceServer) Update(context.Context, *UpdateAdmin) (*GetAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdminServiceServer) Delete(context.Context, *AdminPrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminServiceServer) Login(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminServiceServer) Register(context.Context, *AdminRegisterRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAdminServiceServer) RegisterConfirm(context.Context, *AdminRegisterConfRequest) (*AdminLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterConfirm not implemented")
}
func (UnimplementedAdminServiceServer) ChangePassword(context.Context, *AdminChangePassword) (*AdminChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_service_go.AdminService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Create(ctx, req.(*CreateAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_service_go.AdminService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetByID(ctx, req.(*AdminPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_service_go.AdminService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetList(ctx, req.(*GetListAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_service_go.AdminService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Update(ctx, req.(*UpdateAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_service_go.AdminService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Delete(ctx, req.(*AdminPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_service_go.AdminService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Login(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_service_go.AdminService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Register(ctx, req.(*AdminRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RegisterConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRegisterConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RegisterConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_service_go.AdminService/RegisterConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RegisterConfirm(ctx, req.(*AdminRegisterConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminChangePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_service_go.AdminService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ChangePassword(ctx, req.(*AdminChangePassword))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_service_go.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AdminService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _AdminService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _AdminService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdminService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdminService_Delete_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AdminService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AdminService_Register_Handler,
		},
		{
			MethodName: "RegisterConfirm",
			Handler:    _AdminService_RegisterConfirm_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AdminService_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
