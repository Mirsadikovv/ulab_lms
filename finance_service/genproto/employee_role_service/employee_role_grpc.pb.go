// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: employee_role.proto

package employee_role_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeeRoleServiceClient is the client API for EmployeeRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeRoleServiceClient interface {
	Create(ctx context.Context, in *CreateEmployeeRole, opts ...grpc.CallOption) (*GetEmployeeRole, error)
	GetByID(ctx context.Context, in *EmployeeRolePrimaryKey, opts ...grpc.CallOption) (*GetEmployeeRole, error)
	GetList(ctx context.Context, in *GetListEmployeeRoleRequest, opts ...grpc.CallOption) (*GetListEmployeeRoleResponse, error)
	Update(ctx context.Context, in *UpdateEmployeeRole, opts ...grpc.CallOption) (*GetEmployeeRole, error)
	Delete(ctx context.Context, in *EmployeeRolePrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
}

type employeeRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeRoleServiceClient(cc grpc.ClientConnInterface) EmployeeRoleServiceClient {
	return &employeeRoleServiceClient{cc}
}

func (c *employeeRoleServiceClient) Create(ctx context.Context, in *CreateEmployeeRole, opts ...grpc.CallOption) (*GetEmployeeRole, error) {
	out := new(GetEmployeeRole)
	err := c.cc.Invoke(ctx, "/employee_role_service_go.EmployeeRoleService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeRoleServiceClient) GetByID(ctx context.Context, in *EmployeeRolePrimaryKey, opts ...grpc.CallOption) (*GetEmployeeRole, error) {
	out := new(GetEmployeeRole)
	err := c.cc.Invoke(ctx, "/employee_role_service_go.EmployeeRoleService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeRoleServiceClient) GetList(ctx context.Context, in *GetListEmployeeRoleRequest, opts ...grpc.CallOption) (*GetListEmployeeRoleResponse, error) {
	out := new(GetListEmployeeRoleResponse)
	err := c.cc.Invoke(ctx, "/employee_role_service_go.EmployeeRoleService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeRoleServiceClient) Update(ctx context.Context, in *UpdateEmployeeRole, opts ...grpc.CallOption) (*GetEmployeeRole, error) {
	out := new(GetEmployeeRole)
	err := c.cc.Invoke(ctx, "/employee_role_service_go.EmployeeRoleService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeRoleServiceClient) Delete(ctx context.Context, in *EmployeeRolePrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/employee_role_service_go.EmployeeRoleService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeRoleServiceServer is the server API for EmployeeRoleService service.
// All implementations should embed UnimplementedEmployeeRoleServiceServer
// for forward compatibility
type EmployeeRoleServiceServer interface {
	Create(context.Context, *CreateEmployeeRole) (*GetEmployeeRole, error)
	GetByID(context.Context, *EmployeeRolePrimaryKey) (*GetEmployeeRole, error)
	GetList(context.Context, *GetListEmployeeRoleRequest) (*GetListEmployeeRoleResponse, error)
	Update(context.Context, *UpdateEmployeeRole) (*GetEmployeeRole, error)
	Delete(context.Context, *EmployeeRolePrimaryKey) (*empty.Empty, error)
}

// UnimplementedEmployeeRoleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEmployeeRoleServiceServer struct {
}

func (UnimplementedEmployeeRoleServiceServer) Create(context.Context, *CreateEmployeeRole) (*GetEmployeeRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEmployeeRoleServiceServer) GetByID(context.Context, *EmployeeRolePrimaryKey) (*GetEmployeeRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedEmployeeRoleServiceServer) GetList(context.Context, *GetListEmployeeRoleRequest) (*GetListEmployeeRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedEmployeeRoleServiceServer) Update(context.Context, *UpdateEmployeeRole) (*GetEmployeeRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEmployeeRoleServiceServer) Delete(context.Context, *EmployeeRolePrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeEmployeeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeRoleServiceServer will
// result in compilation errors.
type UnsafeEmployeeRoleServiceServer interface {
	mustEmbedUnimplementedEmployeeRoleServiceServer()
}

func RegisterEmployeeRoleServiceServer(s grpc.ServiceRegistrar, srv EmployeeRoleServiceServer) {
	s.RegisterService(&EmployeeRoleService_ServiceDesc, srv)
}

func _EmployeeRoleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeeRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeRoleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_role_service_go.EmployeeRoleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeRoleServiceServer).Create(ctx, req.(*CreateEmployeeRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeRoleService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRolePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeRoleServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_role_service_go.EmployeeRoleService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeRoleServiceServer).GetByID(ctx, req.(*EmployeeRolePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeRoleService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListEmployeeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeRoleServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_role_service_go.EmployeeRoleService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeRoleServiceServer).GetList(ctx, req.(*GetListEmployeeRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeRoleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeRoleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_role_service_go.EmployeeRoleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeRoleServiceServer).Update(ctx, req.(*UpdateEmployeeRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeRoleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRolePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeRoleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_role_service_go.EmployeeRoleService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeRoleServiceServer).Delete(ctx, req.(*EmployeeRolePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeRoleService_ServiceDesc is the grpc.ServiceDesc for EmployeeRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employee_role_service_go.EmployeeRoleService",
	HandlerType: (*EmployeeRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EmployeeRoleService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _EmployeeRoleService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _EmployeeRoleService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EmployeeRoleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EmployeeRoleService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee_role.proto",
}
